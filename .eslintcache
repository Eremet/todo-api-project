[{"/Users/mac/Desktop/todo-api/src/App.js":"1","/Users/mac/Desktop/todo-api/src/components/Main.js":"2","/Users/mac/Desktop/todo-api/src/components/Home/index.js":"3","/Users/mac/Desktop/todo-api/src/components/Login/index.js":"4","/Users/mac/Desktop/todo-api/src/config/index.js":"5","/Users/mac/Desktop/todo-api/src/index.js":"6","/Users/mac/Desktop/todo-api/src/reportWebVitals.js":"7","/Users/mac/Desktop/todo-api/src/components/RenderTodo/index.js":"8"},{"size":149,"mtime":1609967390178,"results":"9","hashOfConfig":"10"},{"size":350,"mtime":1609962573253,"results":"11","hashOfConfig":"10"},{"size":4476,"mtime":1610131409193,"results":"12","hashOfConfig":"10"},{"size":6630,"mtime":1610165960062,"results":"13","hashOfConfig":"10"},{"size":47,"mtime":1609907277000,"results":"14","hashOfConfig":"10"},{"size":682,"mtime":1609917846113,"results":"15","hashOfConfig":"10"},{"size":362,"mtime":1609917866464,"results":"16","hashOfConfig":"10"},{"size":4411,"mtime":1610130529980,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1qy1m6s",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},"/Users/mac/Desktop/todo-api/src/App.js",[],["39","40"],"/Users/mac/Desktop/todo-api/src/components/Main.js",[],"/Users/mac/Desktop/todo-api/src/components/Home/index.js",["41","42","43"],"import React, { useState, useEffect} from 'react'\nimport { API } from '../../config'\nimport RenderTodo from '../RenderTodo'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AddIcon from '@material-ui/icons/Add';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  \n  },\n}));\n\nexport default function Home(props) {\n    const classes = useStyles();\n    const [todoInput, setToDoInput] =useState('')\n    const [data, setData] = useState(null)\n\n    useEffect(()=>{\n        let token = localStorage.getItem('token')\n        if(token == null){\n            props.history.push('/login')\n        }else{\n            getAllTodos()\n        }\n    },[])\n    const logOut=()=>{\n        localStorage.removeItem('token', ' ')\n        props.history.push('/login')\n    }\n\n    const getAllTodos=async()=>{\n        let token = localStorage.getItem('token')\n        try{\n            let resp = await fetch (API,{\n                method:'GET',\n                headers:{\n                    \"Content-Type\" : \"application/json\",\n                    Authorization:'token '+ token\n                }\n            })\n            let json = await resp.json()\n\n            setData(json)\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    const createTodo = async()=>{\n        let id = localStorage.getItem('id')\n        let token = localStorage.getItem('token')\n        let data = {\n            author:id,\n            title:todoInput,\n            body:todoInput\n        }\n        try{\n            let resp = await fetch(API,{\n                method:'POST',\n                body:JSON.stringify(data),\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    Authorization:'token ' + token\n                }\n            })\n            let json = await resp.json()\n            setToDoInput('')\n            getAllTodos()\n        }catch(error){\n            console.log(error)\n        }\n    }\n    return (\n        <div>\n            <div\n                style={{\n                    marginTop: '5%',\n                    backgroundColor: 'grey',\n                    border: '5px solid black',\n                }}>\n                <h1\n                style={{\n                        marginLeft: '40%',\n                        fontSize: '45px',\n                    }}\n                >My to-do list</h1>\n            </div>\n            <div\n                style={{\n                    marginTop: '5%',\n                    marginLeft: '35%',\n                    marginBottom: '5%',\n                }}>\n                <TextField \n                    style={{\n                        marginLeft: '3%',\n                    }}\n                    className={classes.input}\n                    value={todoInput}\n                    onChange={(event)=>{\n                        setToDoInput(event.target.value)\n                    }}\n                    id=\"outlined-search\" \n                    label=\"Search field\" \n                    type=\"search\" \n                    variant=\"outlined\" />\n                <Button\n                    style={{\n                        marginLeft: '5%',\n                        width: '90px',\n                        height: '55px'\n                    }}\n                    onClick={logOut}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    startIcon={<AddIcon/>}\n                    onClick={()=>{\n                        createTodo()\n                }}>ADD\n            </Button>\n                <div>\n\n                    <RenderTodo\n                        data={data}\n                    />\n\n                </div>\n                <Button\n                style={{\n                    width: '200px',\n                    height: '100px',\n                    marginTop: '5%',\n                    marginLeft: '12%',\n                    marginBottom: '5%',\n                }}\n                onClick={logOut}\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<ExitToAppIcon/>}\n            >\n                Exit\n            </Button>\n\n            </div>\n        </div>\n    )\n}","/Users/mac/Desktop/todo-api/src/components/Login/index.js",["44","45","46"],"import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { API } from '../../config'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport clsx from 'clsx';\nimport FormControl from '@material-ui/core/FormControl';\nimport \"typeface-cormorant\";\n\n\nconst useStyles = makeStyles(() => ({\n      root: {\n          marginLeft: '10%',\n          width: '80%',\n      },\n      firsttitle: {\n          fontSize: '40px',\n          marginBottom: '-3%'\n      },\n      input: {\n          width: '600px',\n          Height: '30px'\n      },\n      buttontrans: {\n          height: '55px',\n          backgroundColor: 'blue',\n          border: '5px',\n          borderRadius: '5px',\n          width: '100px',\n          fontSize: '20px',\n          color: 'white',\n          cursor: 'pointer',\n      },\n      textField: {\n        width: '25ch',\n      },\n      todotext: {\n          fontSize: '40px',\n          color: 'grey',\n          marginTop: '15%',\n          marginLeft: '10%'\n      },\n  }));\n\n  export default function Login(props) {\n \n    const [values, setValues] = React.useState({\n      amount: '',\n      password: '',\n      weight: '',\n      weightRange: '',\n      showPassword: false,\n    });\n\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n      };\n    \n      const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword });\n      };\n    \n      const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n      };\n\n    const classes = useStyles();\n    const [h, setH] = useState('Войти')\n    const [p, setP] = useState('Зарегистрироваться')\n    const [login, setLogin] = useState('')\n    const [pass, setPass] = useState('')\n    const [authOrReg, setAuthOrReg] = useState('/login/')\n    \n    useEffect(()=>{\n        let token = localStorage.getItem('token')\n        if(token != null){\n            props.history.push('/')\n        }\n    })\n\n    const setParameters =()=>{\n        if(authOrReg == '/login/'){\n            setH('Регистрация')\n            setAuthOrReg('/registration/')\n            setP('Войти')\n        }else{\n            setH('Войти')\n            setAuthOrReg('/login/')\n            setP('Зарегистрироваться')\n        }\n        \n    }\n\n    const sendRequest = (e) =>{\n        let val = e.target.value\n        let data = {}\n        if(val == '/login/'){\n            data['username']=login\n            data['password']=pass\n        }else{\n            data['username']=login\n            data['password1']=pass\n            data['password2']=pass\n        }\n        let url = 'dj-rest-auth'+val\n        const requset = axios.post(API+url, data)\n        .then((response)=>{\n            console.log(response)\n            localStorage.setItem('token', response.data.key)\n            localStorage.setItem('id', response.data.user.id)\n            props.history.push('/')\n        },(error)=>{\n            console.log(error)\n        })\n    }\n    return (\n            <div>\n                <h1\n                className={classes.todotext}\n                >To-Do List</h1>\n                <Card className={classes.root}>\n                    <CardContent>\n                        <Typography className={classes.firsttitle} color=\"textSecondary\" gutterBottom>\n                        {h}\n                        </Typography>\n                    \n                    </CardContent>\n                    <CardActions>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"login\" \n                        variant=\"outlined\"  \n                        value={login}\n                        className={classes.input}\n                        onChange={(event)=>{\n                            setLogin(event.target.value)\n                    }}/>\n                    <FormControl \n                        className={clsx(classes.margin, classes.textField)} \n                        variant=\"outlined\" \n                        value={pass}\n                        onChange={(event)=>{\n                            setPass(event.target.value)\n                        }}>\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                    <OutlinedInput\n                        id=\"outlined-adornment-password\"\n                        type={values.showPassword ? 'text' : 'password'}\n                        value={values.password}\n                        onChange={handleChange('password')}\n                        endAdornment={\n                        <InputAdornment position=\"end\">\n                            <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            >\n                            {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                            </IconButton>\n                        </InputAdornment>\n                        }\n                        labelWidth={70}\n                    />\n                    </FormControl>\n                    <button\n                        className={classes.buttontrans}\n                        value={authOrReg}\n                        onClick={(event)=>{\n                            sendRequest(event)\n                        }}\n                    >\n                        Войти\n                    </button>\n                    </CardActions>\n                    <CardActions>\n                    <Button \n                        onClick={setParameters}\n                        variant=\"outlined\"\n                        color=\"primary\">\n                    {p}</Button>\n                    </CardActions>\n                </Card>\n            </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n ","/Users/mac/Desktop/todo-api/src/config/index.js",[],"/Users/mac/Desktop/todo-api/src/index.js",[],"/Users/mac/Desktop/todo-api/src/reportWebVitals.js",[],"/Users/mac/Desktop/todo-api/src/components/RenderTodo/index.js",["47"],"import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport justDoIt from './images/images.png'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }));\n\nexport default function RenderTodo(props) {\n    const classes = useStyles();\n    return (\n        <div>\n                {props.data ?\n                    props.data.map(el=>{\n                        return (\n                            <Card \n                            style={{\n                                marginTop: '5%',\n                                width: '400px',\n                                background: 'grey'\n                            }}>\n                                <img \n                                src={justDoIt}\n                                style={{\n                                    marginTop: '5%',\n                                    marginLeft: '10%',\n                                }}\n                                />\n                               \n                                    <h2\n                                    style={{\n                                        marginLeft: '10%',\n                                    }}\n                                    >{el.title}</h2>\n                                    <div>\n                                        {!el.status ?\n                                            <Button\n                                                style={{\n                                                    marginLeft: '7%',\n                                                    marginBottom: '3%'\n                                                }}\n                                                value={el.id}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                className={classes.button}\n                                                startIcon={<AssignmentTurnedInIcon />}\n                                            >\n                                                Done\n                                            </Button>\n                                            :null\n                                        }\n                                        <Button\n                                                style={{\n                                                    marginBottom: '3%',\n                                                    marginLeft: '3%',\n                                                }}\n                                                value={el.id}\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.button}\n                                                startIcon={<DeleteIcon />}\n                                            >\n                                                Delete\n                                            </Button>\n                                            <Button\n                                                style={{\n                                                    marginLeft: '3%',\n                                                    marginBottom: '3%'\n                                                }}\n                                                value={el.id}\n                                                variant=\"contained\"\n                                                color=\"default\"\n                                                className={classes.button}\n                                                startIcon={<EditIcon />}\n                                            >\n                                                Edit\n                                            </Button>\n                                    </div>\n                            </Card>\n                        )\n                    })\n                    :<h3>Пока данных нет</h3>\n                }\n        </div>\n    )\n}",["48","49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":33,"column":7,"nodeType":"56","endLine":33,"endColumn":9,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":74,"column":17,"nodeType":"60","messageId":"61","endLine":74,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":126,"column":21,"nodeType":"64","endLine":128,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":93,"column":22,"nodeType":"67","messageId":"68","endLine":93,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":108,"column":16,"nodeType":"67","messageId":"68","endLine":108,"endColumn":18},{"ruleId":"58","severity":1,"message":"69","line":117,"column":15,"nodeType":"60","messageId":"61","endLine":117,"endColumn":22},{"ruleId":"70","severity":1,"message":"71","line":32,"column":33,"nodeType":"72","endLine":38,"endColumn":35},{"ruleId":"50","replacedBy":"73"},{"ruleId":"52","replacedBy":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["77"],"no-unused-vars","'json' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'requset' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["75"],["76"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [props.history]",{"range":"80","text":"81"},[902,904],"[props.history]"]